{"version":3,"sources":["main.js"],"names":["initMap","map","google","maps","Map","document","getElementById","center","lat","lng","zoom","objectKeys","object","Object","keys","key","hasOwnProperty","push","namespace","toggles","querySelectorAll","togglesMap","i","length","toggle","targetId","getAttribute","id","setAttribute","hasAttribute","targetsList","targets","targetsMap","j","target","toggleId","addEventListener","event","isExpanded","JSON","parse","window","log","param","console","file","revision","createElementNS","createSVGRect","request","data","isLocalStorage","insertIT","body","insertAdjacentHTML","insert","localStorage","getItem","XMLHttpRequest","open","onload","status","responseText","setItem","send","e"],"mappings":"AAuEA,QAASA,WACPC,IAAM,GAAIC,QAAOC,KAAKC,IAAIC,SAASC,eAAe,QAChDC,QAASC,IAAK,WAAYC,IAAK,cAC/BC,KAAM,MAtET,WAEC,QAASC,GAAYC,GACnB,GAAIC,OAAOC,KAAM,MAAOD,QAAOC,KAAKF,EAEpC,IAAIE,KACJ,KAAK,GAAIC,KAAOH,GAAQA,EAAOI,eAAeD,IAAQD,EAAKG,KAAKF,EAChE,OAAOD,GAQT,IAAK,GALDI,GAAY,mBACZC,EAAUd,SAASe,iBAAiB,IAAMF,EAAY,KACtDG,KAGKC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,GAAK,EAAG,CAC1C,GAAIE,GAASL,EAAQG,GACjBG,EAAWD,EAAOE,aAAaR,EAGnCM,GAAOG,IAAMH,EAAOI,aAAa,KAAMH,EAAW,gBAClDD,EAAOK,aAAa,kBAAoBL,EAAOI,aAAa,iBAAiB,GAC7EJ,EAAOK,aAAa,kBAAoBL,EAAOI,aAAa,gBAAiBH,GAG7EJ,EAAW,IAAMI,GAAYD,EAAOG,GAQtC,IAAK,GALDG,GAAcnB,EAAWU,GACzBU,EAAUD,EAAYP,QAAUlB,SAASe,iBAAiBU,GAC1DE,KAGKC,EAAI,EAAGA,EAAIF,EAAQR,OAAQU,GAAK,EAAG,CAC1C,GAAIC,GAASH,EAAQE,GACjBE,EAAWd,EAAW,IAAMa,EAAOP,GAGvCO,GAAOL,aAAa,gBAAkBK,EAAON,aAAa,eAAe,GACzEM,EAAOL,aAAa,oBAAuBM,GAAYD,EAAON,aAAa,kBAAmBO,GAG9FH,EAAWE,EAAOP,IAAMO,EAG1B7B,SAAS+B,iBAAiB,QAAS,SAAUC,GAC3C,GAAIb,GAASa,EAAMH,OACfA,EAASF,EAAWR,EAAOE,aAAaR,IACxCoB,EAAaC,KAAKC,MAAMhB,EAAOE,aAAa,iBAE5CQ,KACFV,EAAOI,aAAa,iBAAkBU,GACtCJ,EAAON,aAAa,cAAeU,SAWzCG,OAAOC,IAAM,SAASC,GAClBC,QAAQF,IAAIC,GAEhB,IAAI1C,MAOD,SAAUwC,EAAQpC,GAEnB,YAEA,IAAIwC,GAAW,4BACbC,EAAW,CAEb,KAAKzC,EAAS0C,kBAAoB1C,EAAS0C,gBAAiB,6BAA8B,OAAQC,cAChG,OAAO,CAET,IACEC,GACAC,EAFEC,EAAiB,gBAAkBV,IAAuC,OAA7BA,EAAuB,aAGtEW,EAAW,WAET/C,EAASgD,KAAKC,mBAAoB,aAAcJ,IAElDK,EAAS,WAEHlD,EAASgD,KAAOD,IACf/C,EAAS+B,iBAAkB,mBAAoBgB,GAGxD,IAAID,GAAkBK,aAAaC,QAAS,iBAAoBX,IAE9DI,EAAOM,aAAaC,QAAS,kBAI3B,MADAF,MACO,CAIX,KAEEN,EAAU,GAAIS,gBACdT,EAAQU,KAAM,MAAOd,GAAM,GAC3BI,EAAQW,OAAS,WAEXX,EAAQY,QAAU,KAAOZ,EAAQY,OAAS,MAE5CX,EAAOD,EAAQa,aACfP,IACIJ,IAEFK,aAAaO,QAAS,gBAAkBb,GACxCM,aAAaO,QAAS,eAAkBjB,MAI9CG,EAAQe,OAEV,MAAOC,MAENxB,OAAQpC","file":"main.js","sourcesContent":["/*\r\n Third party\r\n */\r\n\r\n(function () {\r\n  // Simple polyfill for Object.keys\r\n  function objectKeys (object) {\r\n    if (Object.keys) return Object.keys(object);\r\n\r\n    var keys = [];\r\n    for (var key in object) object.hasOwnProperty(key) && keys.push(key);\r\n    return keys;\r\n  }\r\n\r\n  var namespace = 'data-a11y-toggle';\r\n  var toggles = document.querySelectorAll('[' + namespace + ']');\r\n  var togglesMap = {};\r\n\r\n  // Loop over the toggles\r\n  for (var i = 0; i < toggles.length; i += 1) {\r\n    var toggle = toggles[i];\r\n    var targetId = toggle.getAttribute(namespace);\r\n\r\n    // Set `id`, `aria-expanded` and `aria-controls` if not set yet\r\n    toggle.id || toggle.setAttribute('id', targetId + '-a11y-toggle');\r\n    toggle.hasAttribute('aria-expanded') || toggle.setAttribute('aria-expanded', false);\r\n    toggle.hasAttribute('aria-controls') || toggle.setAttribute('aria-controls', targetId);\r\n\r\n    // Map target `id` selector with toggle `id`\r\n    togglesMap['#' + targetId] = toggle.id;\r\n  }\r\n\r\n  var targetsList = objectKeys(togglesMap);\r\n  var targets = targetsList.length && document.querySelectorAll(targetsList);\r\n  var targetsMap = {};\r\n\r\n  // Loop over targets\r\n  for (var j = 0; j < targets.length; j += 1) {\r\n    var target = targets[j];\r\n    var toggleId = togglesMap['#' + target.id];\r\n\r\n    // Set `aria-hidden` and `aria-labelledby` if not set yet\r\n    target.hasAttribute('aria-hidden') || target.setAttribute('aria-hidden', true);\r\n    target.hasAttribute('aria-labelledby') || (toggleId && target.setAttribute('aria-labelledby', toggleId));\r\n\r\n    // Map target `id` with target node for quick find on click event\r\n    targetsMap[target.id] = target;\r\n  }\r\n\r\n  document.addEventListener('click', function (event) {\r\n    var toggle = event.target;\r\n    var target = targetsMap[toggle.getAttribute(namespace)];\r\n    var isExpanded = JSON.parse(toggle.getAttribute('aria-expanded'));\r\n\r\n    if (target) {\r\n      toggle.setAttribute('aria-expanded', !isExpanded);\r\n      target.setAttribute('aria-hidden', isExpanded);\r\n    }\r\n  });\r\n}());\r\n\r\n\r\n/*\r\n    Custom\r\n */\r\n\r\n//Так приятней :)\r\nwindow.log = function(param){\r\n    console.log(param);\r\n};\r\nvar map;\r\nfunction initMap() {\r\n  map = new google.maps.Map(document.getElementById('map'), {\r\n    center: {lat: 34.8543784, lng: -111.7951384},\r\n    zoom: 10\r\n  });\r\n}\r\n;( function( window, document )\r\n{\r\n  'use strict';\r\n \r\n  var file     = '../img/sprite.symbol.html',\r\n    revision = 1;\r\n \r\n  if( !document.createElementNS || !document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' ).createSVGRect )\r\n    return true;\r\n \r\n  var isLocalStorage = 'localStorage' in window && window[ 'localStorage' ] !== null,\r\n    request,\r\n    data,\r\n    insertIT = function()\r\n    {\r\n      document.body.insertAdjacentHTML( 'afterbegin', data );\r\n    },\r\n    insert = function()\r\n    {\r\n      if( document.body ) insertIT();\r\n      else document.addEventListener( 'DOMContentLoaded', insertIT );\r\n    };\r\n \r\n  if( isLocalStorage && localStorage.getItem( 'inlineSVGrev' ) == revision )\r\n  {\r\n    data = localStorage.getItem( 'inlineSVGdata' );\r\n    if( data )\r\n    {\r\n      insert();\r\n      return true;\r\n    }\r\n  }\r\n   \r\n  try\r\n  {\r\n    request = new XMLHttpRequest();\r\n    request.open( 'GET', file, true );\r\n    request.onload = function()\r\n    {\r\n      if( request.status >= 200 && request.status < 400 )\r\n      {\r\n        data = request.responseText;\r\n        insert();\r\n        if( isLocalStorage )\r\n        {\r\n          localStorage.setItem( 'inlineSVGdata',  data );\r\n          localStorage.setItem( 'inlineSVGrev',   revision );\r\n        }\r\n      }\r\n    }\r\n    request.send();\r\n  }\r\n  catch( e ){}\r\n \r\n}( window, document ) );"],"sourceRoot":"/source/"}